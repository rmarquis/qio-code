game
 - written from scratch with C++ class system
 - serverside Bullet physics for rigid bodies and cars
 - player movement is done by Bullet character controler
 - networked ragdoll system based on Doom3 ArticulatedFigures and Bullet physics
 
cgame 
 - cleared up code
 - better communication with renderer
 
renderer
 - written from scratch in C++
 - Quake3, RTCW, ET, MoHAA, HalfLife2 BSP support with PVS and lightmapping
 - partial Quake2 and Quake BSP support
 - partial COD bsp support
 - Doom3/Quake4 .proc support with portal rendering system
 - ET:QW .procb support (without portals)
 - direct .map files loading (both Q3 and Doom3 versions)
 - openGL backend totally separated from frontend
 - basic DirectX 9 backend
 - VBO/IBO based (several times faster than Q3 renderer)
 - deltaRefEntities system
 - GLSL shaders support in backendGL
 - HLSL shaders support in backendDX9 (DirectX9 .fx files)
 - (not yet finished) per pixel realtime lighting rendering mode

modelLoader
 - written from scratch in C++
 - waveFront .obj support (with .mtl files)
 - .ASE static models support
 - usefull .mdpp (MoDelPreProcess) "scripts" system used to scale/rotate model after loading
 - Doom3 .md5mesh / .md5anim support
 - .LWO static models support
 - Quake3 .md3 and Quake2 .md2 keyframed meshes support
 - unfinished Half Life2 .mdl loader (without animations)
 
materialSystem
 - written from scratch in C++
 - BASIC q3 shaders / Doom3 materials support
 
declManager
 - Doom3 model decls support (.def files)
 - Doom3 entity decls support (.def files)
 - Doom3 Articulated Figures (.af files - ragdoll definitions) support
 
common
 - interfaces system similiar to one in SourceEngine
 - engine core based on IOQuake3 code
 
shared
 - many math, geometry and util C++ classes
 - autoCvar_c class for easier ConVars usage
 
 q3radiant
 - ???
 
 q3map
 - ???
 
 
 